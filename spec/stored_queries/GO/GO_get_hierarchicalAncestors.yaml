# Get all hierarchical ancestors 
# (all parentsâ€™s parents) resources for this term. Hierarchical 
# ancestors include is-a and other related parents, such as 
# part-of/develops-from, that imply a hierarchical relationship

name: GO_get_hierarchicalAncestors
params:
  type: object
  required: [id, ts]
  properties:
    id:
      type: string
      title: Document ID
      description: GO id of the term you want to get all the hierarchical ancestors of
    limit:
        type: integer
        default: 20
        description: Maximum result limit 
        maximum: 1000
    offset:
        type: integer
        default: 0
        description: Result offset for pagination
        maximum: 100000
    ts:
      type: integer
      title: Versioning timestamp
query_prefix: WITH GO_terms
query: |
  FOR t in GO_terms
    FILTER t.id == @id
    FILTER t.created <= @ts AND t.expired >= @ts
    limit 1
    LET results1 = (
      FOR v_relationship, e_relationship IN 1..100 OUTBOUND t GO_edges_relationship
        FILTER e_relationship.relationship_type == 'part_of' 
          OR e_relationship.relationship_type == 'has_part'
          OR e_relationship.relationship_type == 'occurs_in'
        FILTER e_relationship.created <= @ts AND e_relationship.expired >= @ts
        RETURN {term: v_relationship, edge: e_relationship}
    )
    LET results2 = (
      FOR v_isa, e_isa IN 1..100 OUTBOUND t GO_edges
        FILTER e_isa.type == "is_a"
        FILTER e_isa.created <= @ts AND e_isa.expired >= @ts
        RETURN {term: v_isa, edge: e_isa}
    )
    FOR x IN UNION(results1, results2)
      SORT x.id ASC
      LIMIT @offset, @limit
      RETURN DISTINCT x
