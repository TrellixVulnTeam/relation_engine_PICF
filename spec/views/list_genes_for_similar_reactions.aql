// Return genes associated with reactions similar to a query reaction
// Args:
//   rid - reaction id
//   sf_sim - minimum structural fingerprint similarity score
//   df_sim - minimum difference fingerprint similarity score
//   exclude_self - if true, don't include the query reactions genes

WITH rxn_reaction
LET ws_ids = @ws_ids
LET start = @exclude_self ? 1 : 0
LET rxns = (
    FOR v, e IN start..1
        ANY @rid rxn_similar_to_reaction
        OPTIONS {uniqueVertices: "global", bfs: true}
        FILTER !e || e.sf_similarity >= @sf_sim
        FILTER !e || e.df_similarity >= @df_sim
        RETURN {id: v._id, key: v._key, name: v.name, definition: v.definition, "structural similarity": e.sf_similarity, "difference similarity": e.df_similarity}
)
LET rxn_ids = rxns[*].id

LET rxn_gene_links = (
    FOR e in rxn_reaction_within_complex
        FILTER e._from in rxn_ids
        LET linked_gene_ids = FLATTEN(
            FOR c in rxn_gene_complex
               FILTER c._id == e._to
               RETURN c.genes
        )
        COLLECT rxn_id = e._from INTO groups KEEP linked_gene_ids
        RETURN {rxn_id: rxn_id, linked_gene_ids: UNIQUE(FLATTEN(groups[*].linked_gene_ids))}
)

LET gene_ids = UNIQUE(FLATTEN(rxn_gene_links[*].linked_gene_ids))

LET genes = (
    FOR g in ncbi_gene
       FILTER g._key IN gene_ids
       RETURN {key: g._key, product: g.product, function: CONCAT_SEPARATOR(', ', g.functions), sequence: g.protein_translation}
)

RETURN {rxns: rxns, rxn_gene_links: rxn_gene_links, genes: genes}
