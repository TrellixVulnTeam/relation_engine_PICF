{
  "info": {
    "name": "Relation Engine API",
    "repository": "https://github.com/kbase/relation_engine_api",
    "description": "Interface for updating or querying data in the KBase Relation Engine graph database."
  },
  "api_prefix": "/api",
  "actions": {
    "/views GET": {
      "description": "Fetch view names and (optionally) their AQL source code.",
      "auth": "public",
      "query": {
        "show_sources": {
          "type": "boolean",
          "default": false,
          "description": "Whether to show the AQL source code for each view."
        }
      },
      "responses": {
        "200": {
          "schema": ["/schemas/view"],
          "description": "A list of views with names and (optionally) AQL source."
        },
        "not_ok": {"schema": "/schemas/error"}
      }
    },
    "/query POST": {
      "description": "Execute a view as a query against the database.",
      "auth": "bearer",
      "query": {
        "view_name": {
          "description": "Name of the view that we want to use for the query.",
          "type": "string"
        }
      },
      "body": {
        "description": "Arguments for the query. These go into the bind variables in the AQL.",
        "type": "object"
      },
      "responses": {
        "200": {
          "schema": "/schemas/query_results",
          "description": "Resulting data from running the query"
        },
        "not_ok": {"schema": "/schemas/error"}
      }
    },
    "/schemas GET": {
      "description": "Fetch available schema names and optionally their JSON sources.",
      "auth": "public",
      "query": {
        "show_sources": {
          "type": "boolean",
          "description": "Whether to show the JSON source for each schema."
        }
      },
      "responses": {
        "200": {
          "schema": ["schemas"],
          "description": "Array of schema name and (optionally) schema content."
        },
        "not_ok": {"schema": "error"}
      }
    },
    "/documents PUT": {
      "description": "Create, update, or replace documents in the database in a certain collection.",
      "auth": "bearer",
      "query": {
        "on_duplicate": {
          "description": "How to handle duplicate documents based on a '_key' match.",
          "type": "string",
          "enum": ["error", "update", "replace", "ignore"]
        }
      },
      "responses": {
        "200": {"description": "Successful save."},
        "not_ok": {"schema": "error"}
      }
    }
  },
}
